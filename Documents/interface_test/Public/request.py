# -*- coding: utf-8 -*-import os, syscurPath = os.path.abspath(os.path.dirname(__file__))rootPath = os.path.split(curPath)[0]sys.path.append(rootPath)import jsonimport requestsfrom Branch.log import Logfrom config import globalparamfrom Branch import operate_excelfrom Public.login import Login_infrom Public.lg import Lg_inclass Rquest_Api():    """    对请求方式做二次封装    """    cookie_data = Login_in().select_user()    cms_cookie_data = Login_in().cms_Login()    cookies = {"JSESSIONID": "A94A4A8FAA1C899EEE0CE5FC36A68D40",                    "tgc": '7IyG2VXfQ7',                    "um_remember": '75F0BBE31DC4C1AD72A7AA67277235324C544691DDE73FBA499FBDB287D46979:2E175E4D7F73DDD96CC2524B965E12A6:296888EEB21E9B94D628FC2AA3531D93',                    "umbrella_token": cookie_data, "umbrella_user_name": '%E6%98%94%E5%B9%B4%E5%8D%8A%E5%A4%8Fdut8ss'}    cookies_cms = {"token": cms_cookie_data}    """新用户18069425303的登陆信息"""    cookie_data1 = Lg_in().select_user()    cookies1 = {"JSESSIONID": "CD41221E64FE5148BFA6B75C792E609E",               "tgc": 'H2s3zHFyjs',               "um_remember": '23F8F41BB957F622365E39A882F75E59:2E175E4D7F73DDD96CC2524B965E12A6:C5ADE6E9115A97B5EED60DD53D5158B9',               "umbrella_token": cookie_data1, "umbrella_user_name": '5303RvS3Ve'}    def __init__(self,url2):        self.headers = {"User-Agent": "iPhone7,2(iOS/12.0.1) WeexGroup("}        self.headers1 = {"User-Agent":"okhttp/3.11.0"} #添加的新用户的信息        self.headers_cms = {"User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36"}        self.url1 = [globalparam.app_path, globalparam.appserver_path, globalparam.cms_path]        self.app_url = self.url1[0] + url2        self.server_url = self.url1[1] + url2        self.url_cms =self.url1[2] +url2    def select_param(self,key):        """        判断接口类型        :param key:        :return:        """        if key == 'app接口':            return self.headers, Rquest_Api.cookies, self.app_url        elif key == 'appserver接口':            return self.headers, Rquest_Api.cookies, self.server_url        elif key == '后台':            Log().info("{0},{1},{2}".format(self.headers_cms, Rquest_Api.cookies_cms, self.url_cms))            return self.headers_cms, Rquest_Api.cookies_cms, self.url_cms        elif key == '直播观众':            return self.headers1, Rquest_Api.cookies1, self.app_url        else:            Log().error('接口类型填写错误')    def get(self, params, key):        """        get请求方式        :param params: get请求参数        :return: 响应体        """        try:            # value1 = self.select_param(key)            #提交折扣码时，需使用另一个注册用户的cookie            # if 'confirmCustomService' in value1[2]:            #     # 重置cookie            #     urll = '/api/shop/shopLogin?tel=15868137404&code=123456'            #     urlll = '/api/shop/login/selectUser'            #     Cookie = {"JSESSIONID": "3398DB9078371DD7030129AE8C6835DD"}            #     Headers = {"User-Agent": "iPhone7,2(iOS/12.0.1) WeexGroup("}            #     rr = requests.get(url=self.url1[0] + urll, cookies=Cookie, headers=Headers)            #     apijson1 = rr.text.replace("false", "0")            #     apijson2 = apijson1.replace("true", "0")            #     apijson3 = json.loads(apijson2)            #     userid = apijson3['data']['mobileLoginUser'][0]['userId']            #     token = apijson3['data']['token']            #     data = {'tel': '15869137404', 'userId': userid, 'token': token, 'isShop': 'false'}            #     session = requests.Session()            #     r = session.post(url=self.url1[0] + urlll, cookies=Cookie, headers=Headers, data=data)            #     r.encoding = 'UTF-8'            #     cookie = requests.utils.dict_from_cookiejar(session.cookies)            #     Rquest_Api.cookies = {"JSESSIONID": "13B2356506A22A191B98261D5002AF16",            #                           "tgc": cookie['tgc'], "um_remember": cookie['um_remember'],            #                           "umbrella_token": cookie['umbrella_token'],            #                           "umbrella_user_name": cookie['umbrella_user_name']}            value2 = self.select_param(key)            print(value2[1])            r = requests.get(url=value2[2], params=params, cookies=value2[1],headers=value2[0])            r.encoding = 'UTF-8'            response_code = r.status_code            response_text = r.text            Log().info('成功发起GET请求(%s)，请求url为：%s，请求结果code为：%s, 请求结果字段为：%s' %                       (value2[2], key, response_code, response_text))            return response_text        except Exception as e:            Log().error('get请求出错，出错原因:{0}'.format(e))    def post(self, params, key):#post消息        #data = json.dumps(params)        try:            data = json.loads(params)            value = self.select_param(key)            r = requests.post(url=value[2],data=data,cookies=value[1],headers=value[0])            response_code = r.status_code            response_text = r.text            Log().info('成功发起POST请求(%s)，请求结果code为：%s, 请求结果字段为：%s' % (key, response_code, response_text))            return response_text        except Exception as e:            Log().error('post请求出错，出错原因:%s' % e)            return {'code': 1, 'result': 'post请求出错，出错原因:%s' % e}    def delete(self, params, key):#删除的请求        try:            value = self.select_param(key)            r = requests.delete(url=value[2],params=params, cookies=value[1],headers=value[0])            response_code = r.status_code            response_text = r.text            Log().info('成功发起DELETE请求(%s)，请求结果code为：%s, 请求结果字段为：%s' % (key, response_code, response_text))            return response_code, response_text        except Exception as e:            Log().error('delete请求出错，出错原因:%s' % e)            return {'code': 1, 'result': 'del请求出错，出错原因:%s' % e}    def put(self, params, key):#put请求        try:            data = json.loads(params)            value = self.select_param(key)            r = requests.put(url=value[2],data=data, cookies=value[1],headers=value[0])            response_code = r.status_code            response_text = r.text            Log().info('成功发起PUT请求(%s)，请求结果code为：%s, 请求结果字段为：%s' % (key, response_code, response_text))            return response_text        except Exception as e:            Log().error('put请求出错，出错原因:%s' % e)            return {'code': 1, 'result': 'put请求出错，出错原因:%s' % e}